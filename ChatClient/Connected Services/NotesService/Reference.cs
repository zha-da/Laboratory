//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.NotesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://schemas.datacontract.org/2004/07/notes_service")]
    [System.SerializableAttribute()]
    public partial class Note : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotesService.IServiceNotes")]
    public interface IServiceNotes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotes/CreateNote", ReplyAction="http://tempuri.org/IServiceNotes/CreateNoteResponse")]
        ChatClient.NotesService.Note CreateNote(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotes/CreateNote", ReplyAction="http://tempuri.org/IServiceNotes/CreateNoteResponse")]
        System.Threading.Tasks.Task<ChatClient.NotesService.Note> CreateNoteAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotes/ConnectToService", ReplyAction="http://tempuri.org/IServiceNotes/ConnectToServiceResponse")]
        ChatClient.NotesService.Note[] ConnectToService(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceNotes/ConnectToService", ReplyAction="http://tempuri.org/IServiceNotes/ConnectToServiceResponse")]
        System.Threading.Tasks.Task<ChatClient.NotesService.Note[]> ConnectToServiceAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceNotes/DisconnectFromService")]
        void DisconnectFromService(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceNotes/DisconnectFromService")]
        System.Threading.Tasks.Task DisconnectFromServiceAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceNotesChannel : ChatClient.NotesService.IServiceNotes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceNotesClient : System.ServiceModel.ClientBase<ChatClient.NotesService.IServiceNotes>, ChatClient.NotesService.IServiceNotes {
        
        public ServiceNotesClient() {
        }
        
        public ServiceNotesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceNotesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceNotesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceNotesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ChatClient.NotesService.Note CreateNote(string text) {
            return base.Channel.CreateNote(text);
        }
        
        public System.Threading.Tasks.Task<ChatClient.NotesService.Note> CreateNoteAsync(string text) {
            return base.Channel.CreateNoteAsync(text);
        }
        
        public ChatClient.NotesService.Note[] ConnectToService(string username) {
            return base.Channel.ConnectToService(username);
        }
        
        public System.Threading.Tasks.Task<ChatClient.NotesService.Note[]> ConnectToServiceAsync(string username) {
            return base.Channel.ConnectToServiceAsync(username);
        }
        
        public void DisconnectFromService(string username) {
            base.Channel.DisconnectFromService(username);
        }
        
        public System.Threading.Tasks.Task DisconnectFromServiceAsync(string username) {
            return base.Channel.DisconnectFromServiceAsync(username);
        }
    }
}
